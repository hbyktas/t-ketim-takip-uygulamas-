<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tüketim Takip Uygulaması</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Inter fontunu kullan */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Açık gri arka plan */
        }
        /* Özel kaydırma çubuğu stili */
        .history-list::-webkit-scrollbar {
            width: 8px;
        }
        .history-list::-webkit-scrollbar-track {
            background: #e2e8f0; /* Açık gri */
            border-radius: 10px;
        }
        .history-list::-webkit-scrollbar-thumb {
            background: #94a3b8; /* Orta gri */
            border-radius: 10px;
        }
        .history-list::-webkit-scrollbar-thumb:hover {
            background: #64748b; /* Koyu gri */
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-100 to-indigo-100 min-h-screen flex items-center justify-center p-4">
    <div class="bg-white rounded-xl shadow-2xl p-6 md:p-8 w-full max-w-2xl transform transition-all duration-300 hover:scale-[1.01]">
        <h1 class="text-3xl md:text-4xl font-extrabold text-center text-gray-800 mb-6 tracking-tight">
            <span class="text-blue-600">Beach Bar</span> Tüketim Formu
        </h1>

        <!-- Mesaj Kutusu -->
        <div id="message-box" class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg relative mb-4 text-center transition-opacity duration-300 opacity-0">
            <span id="message-text"></span>
        </div>

        <!-- Ürün Butonları Bölümü -->
        <div class="mb-8" id="product-categories">
            <!-- Kategoriler buraya JavaScript ile eklenecek -->
        </div>

        <!-- Tüketim Geçmişi Bölümü -->
        <div>
            <h2 class="text-xl md:text-2xl font-semibold text-gray-700 mb-4 border-b pb-2 flex justify-between items-center">
                Tüketim Geçmişi
                <button id="clear-history-btn" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-all duration-300 text-sm md:text-base transform hover:scale-105 active:scale-95">
                    Geçmişi Temizle
                </button>
            </h2>
            <div id="history-list" class="bg-gray-50 p-4 rounded-lg shadow-inner max-h-80 overflow-y-auto history-list">
                <!-- Tüketim geçmişi buraya JavaScript ile eklenecek -->
                <p id="no-history-message" class="text-gray-500 text-center italic">Henüz bir tüketim kaydı yok.</p>
            </div>
        </div>
    </div>

    <script>
        // Uygulamanın temel ürün listesi, kategorilere ayrılmış
        const productCategories = {
            "Su/Soda": [
                "Soda", "Büyük su", "Küçük su", "S pellegrino büyük", "S pellegrino küçük"
            ],
            "Meşrubatlar": [
                "Cola", "Cola Zero", "Cola light", "Fanta", "Sprite", 
                "Fuse tea şeftali", "Fuse tea limon", "Tonik", "Bitter limon", "Mandalina"
            ],
            "Biralar": [
                "Efes", "Corona", "Heineken", "Becks", "Miller", "Guinness"
            ],
            "Diğerleri": [
                "Ayran"
            ]
        };

        // HTML elementlerini seç
        const productCategoriesContainer = document.getElementById('product-categories');
        const historyListContainer = document.getElementById('history-list');
        const clearHistoryBtn = document.getElementById('clear-history-btn');
        const noHistoryMessage = document.getElementById('no-history-message');
        const messageBox = document.getElementById('message-box');
        const messageText = document.getElementById('message-text');

        // Mesaj kutusunu gösteren fonksiyon
        function showMessage(text, type = 'success') {
            messageText.textContent = text;
            messageBox.classList.remove('hidden', 'opacity-0', 'bg-green-100', 'border-green-400', 'text-green-700', 'bg-red-100', 'border-red-400', 'text-red-700');
            
            if (type === 'success') {
                messageBox.classList.add('bg-green-100', 'border-green-400', 'text-green-700');
            } else if (type === 'error') {
                messageBox.classList.add('bg-red-100', 'border-red-400', 'text-red-700');
            }
            
            messageBox.classList.add('opacity-100'); // Görünür yap

            // Belirli bir süre sonra mesajı gizle
            setTimeout(() => {
                messageBox.classList.remove('opacity-100');
                messageBox.classList.add('opacity-0');
                setTimeout(() => {
                    messageBox.classList.add('hidden'); // Tamamen gizle
                }, 300); // Opaklık geçiş süresi kadar bekle
            }, 3000); // 3 saniye sonra gizle
        }

        /**
         * Mevcut tarihi YYYY-MM-DD formatında döndürür.
         * @returns {string} Geçerli tarih stringi.
         */
        function getCurrentDateString() {
            const today = new Date();
            const year = today.getFullYear();
            const month = String(today.getMonth() + 1).padStart(2, '0'); // Ay 0'dan başlar
            const day = String(today.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        /**
         * Günlük sıfırlama kontrolünü yapar ve gerekirse verileri temizler.
         */
        function checkAndResetDaily() {
            const currentDate = getCurrentDateString();
            const lastResetDate = localStorage.getItem('lastResetDate');

            // Eğer kaydedilmiş bir tarih yoksa veya tarih bugünden farklıysa
            if (!lastResetDate || lastResetDate !== currentDate) {
                localStorage.removeItem('consumptions'); // Tüketim kayıtlarını temizle
                localStorage.setItem('lastResetDate', currentDate); // Yeni sıfırlama tarihini kaydet
                renderConsumptionHistory(); // Geçmişi yeniden render et
                if (lastResetDate) { // Sadece ilk kez açıldığında değil, gün değiştiğinde mesaj göster
                    showMessage('Günlük tüketim kayıtları sıfırlandı!', 'error'); 
                }
            }
        }

        // Tüketim kaydını yerel depolamaya ekle veya güncelle
        function addConsumption(productName) {
            // Mevcut tüketim kayıtlarını al (ürün adına göre bir obje olarak saklanacak)
            const consumptions = JSON.parse(localStorage.getItem('consumptions')) || {};

            // Eğer ürün zaten varsa, sayısını artır ve son tüketim zamanını güncelle
            if (consumptions[productName]) {
                consumptions[productName].count++;
                consumptions[productName].lastConsumed = new Date().toISOString();
            } else {
                // Ürün yoksa, yeni bir kayıt oluştur
                consumptions[productName] = {
                    count: 1,
                    lastConsumed: new Date().toISOString()
                };
            }

            // Yerel depolamaya kaydet
            localStorage.setItem('consumptions', JSON.stringify(consumptions));

            // Geçmişi yeniden render et
            renderConsumptionHistory();

            // Başarılı mesajı göster
            showMessage(`${productName} kaydedildi! Toplam: ${consumptions[productName].count}`);
        }

        // Tüketim geçmişini render et
        function renderConsumptionHistory() {
            const consumptions = JSON.parse(localStorage.getItem('consumptions')) || {};
            historyListContainer.innerHTML = ''; // Mevcut listeyi temizle

            // Eğer hiç kayıt yoksa mesajı göster
            const hasConsumptions = Object.keys(consumptions).length > 0;
            if (!hasConsumptions) {
                noHistoryMessage.classList.remove('hidden');
                historyListContainer.appendChild(noHistoryMessage);
                return;
            } else {
                noHistoryMessage.classList.add('hidden');
            }

            // Kayıtları en son tüketilen tarihe göre sırala
            const sortedConsumptions = Object.entries(consumptions)
                .sort(([, a], [, b]) => new Date(b.lastConsumed) - new Date(a.lastConsumed));

            sortedConsumptions.forEach(([productName, data]) => {
                const date = new Date(data.lastConsumed);
                // Tarih ve saati okunabilir formatta göster
                const formattedDate = date.toLocaleDateString('tr-TR', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                const formattedTime = date.toLocaleTimeString('tr-TR', {
                    hour: '2-digit',
                    minute: '2-digit'
                });

                const listItem = document.createElement('div');
                listItem.className = 'bg-white p-3 rounded-lg shadow-sm mb-2 flex justify-between items-center text-gray-700 transform transition-all duration-200 hover:scale-[1.01] hover:shadow-md';
                listItem.innerHTML = `
                    <span class="font-medium text-blue-700">${productName} (<span class="font-bold text-lg">${data.count}</span>)</span>
                    <span class="text-sm text-gray-500">Son: ${formattedDate} ${formattedTime}</span>
                `;
                historyListContainer.appendChild(listItem);
            });
        }

        // Ürün butonlarını kategorilere göre oluştur
        function createProductButtons() {
            productCategoriesContainer.innerHTML = ''; // Mevcut içeriği temizle
            for (const category in productCategories) {
                const categoryDiv = document.createElement('div');
                categoryDiv.className = 'mb-6'; // Kategori başlıkları arasına boşluk bırak
                
                const categoryTitle = document.createElement('h3');
                categoryTitle.className = 'text-lg md:text-xl font-semibold text-gray-700 mb-3 pb-1 border-b border-gray-300';
                categoryTitle.textContent = category;
                categoryDiv.appendChild(categoryTitle);

                const buttonsGrid = document.createElement('div');
                buttonsGrid.className = 'grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3';
                
                productCategories[category].forEach(product => {
                    const button = document.createElement('button');
                    button.textContent = product;
                    button.className = 'bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg shadow-md transition-all duration-300 text-base md:text-lg transform hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75';
                    button.addEventListener('click', () => addConsumption(product));
                    buttonsGrid.appendChild(button);
                });
                categoryDiv.appendChild(buttonsGrid);
                productCategoriesContainer.appendChild(categoryDiv);
            }
        }

        // Geçmişi temizle butonu işlevi
        clearHistoryBtn.addEventListener('click', () => {
            // Kullanıcıya onay sorusu yerine, bir modal veya özel bir onay mekanizması kullanabiliriz.
            // Şimdilik basitçe temizleyelim ve mesaj gösterelim.
            localStorage.removeItem('consumptions');
            // Geçmişi manuel temizlediğimizde, sıfırlama tarihini de güncelleyelim ki hemen tekrar sıfırlanmasın.
            localStorage.setItem('lastResetDate', getCurrentDateString()); 
            renderConsumptionHistory();
            showMessage('Tüm geçmiş temizlendi!', 'error'); // Temizleme için kırmızı mesaj
        });

        // Uygulama yüklendiğinde çalışacak fonksiyonlar
        window.onload = () => {
            checkAndResetDaily(); // Günlük sıfırlama kontrolünü yap
            createProductButtons();
            renderConsumptionHistory();
        };
    </script>
</body>
</html>